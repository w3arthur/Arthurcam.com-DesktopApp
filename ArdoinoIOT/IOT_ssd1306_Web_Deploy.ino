/* 
  Sketch generated by the Arduino IoT Cloud Thing "ArthurCam.com"
  https://create.arduino.cc/cloud/things/c089bb7d-f067-45dc-9213-765015344c93 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String iotString;
  bool iotLamp;
  bool iotLed;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"


#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define SCREEN_ADDRESS 0x3C
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define FONT_SIZE1 1
#define FONT_SIZE2 2
#define FONT_COLOR WHITE
#define DISTANCE_TOP 26
#define DISTANCE_LEFT 0
#define LOGO_DISTANCE_TOP DISTANCE_TOP +  23
#define LOGO_DISTANCE_LEFT DISTANCE_LEFT + 68
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

#define LED1_VALUE 6
#define LED2_VALUE 7
#define LAMP_VALUE 1

int i = 0;
String str = "Iot Text";
bool isLedPlay = false;

void ledPlay(){
          digitalWrite(LED1_VALUE, !digitalRead(LED1_VALUE)); 
          digitalWrite(LED2_VALUE, !digitalRead(LED1_VALUE)); 
          delay(1000);
}


void setup() {
  pinMode(LED1_VALUE, OUTPUT);
  pinMode(LED2_VALUE, OUTPUT);
  pinMode(LAMP_VALUE, OUTPUT);
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  // Defined in thingProperties.h
  initProperties();
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  
  	if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) { Serial.println(F("SSD1306 allocation failed")); for(;;); }
	display.setRotation(2);
	delay(2000);
  
	display.clearDisplay();
	display.setTextSize(FONT_SIZE2);
	display.setTextColor(FONT_COLOR);
	display.setCursor(DISTANCE_LEFT, DISTANCE_TOP);
	display.println(str);// Display static text
	display.display(); 
  
  
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  i = ( millis() / 1000 ) % 60;
  
  lcdDisply();
  if(isLedPlay) ledPlay();
  else delay(1000);
}



void lcdDisply(){
	display.clearDisplay();
	display.setTextSize(2);
	display.setCursor(7, 0);
	display.println("IOT Server");
	display.setTextSize(FONT_SIZE2);
	display.setCursor(DISTANCE_LEFT, DISTANCE_TOP);
	display.println(str);// Display static text

	display.setTextSize(FONT_SIZE1);
	display.setCursor(LOGO_DISTANCE_LEFT, LOGO_DISTANCE_TOP);
	display.println("ArthurCam");
	display.setCursor(LOGO_DISTANCE_LEFT + 28, LOGO_DISTANCE_TOP + 8);
	display.println(".com");

	display.setCursor(DISTANCE_LEFT, LOGO_DISTANCE_TOP);
	
	display.println(i >= 10 ? String(i) : "0" + String(i) );
	display.println("  sec");
	display.display(); 
}



/*
  Since IotString is READ_WRITE variable, onIotStringChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIotStringChange()  {
    str = iotString;
  // Add your code here to act upon IotString change
}

/*
  Since IotLamp is READ_WRITE variable, onIotLampChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIotLampChange()  {
  digitalWrite(LAMP_VALUE, !digitalRead(LAMP_VALUE));
  // Add your code here to act upon IotLamp change
}

/*
  Since IotLed is READ_WRITE variable, onIotLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onIotLedChange()  {
      isLedPlay = !isLedPlay;
      if(!isLedPlay){
        digitalWrite(LED1_VALUE, LOW); 
        digitalWrite(LED2_VALUE, LOW); 
      }
  // Add your code here to act upon IotLed change
}